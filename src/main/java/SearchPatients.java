
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Hell
 */
public class SearchPatients extends javax.swing.JFrame {

    /**
     * Creates new form SearchPatients
     */
    public SearchPatients() {
        initComponents();
        changeLang();
    }

    void changeLang() {
        int langIndex = 1;

        try {

            Connection con = new DBConnect().Connect();
            Statement stmt = con.createStatement();
            String sql = "SELECT * FROM LANGUAGE";
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {

                langIndex = rs.getInt(1);
            }

        } catch (Exception e) {
            System.out.println(e);
        }

        switch (langIndex) {
            case 1:
                break;
            case 2:
                jButton1.setText("Chercher");
                jButton2.setText("Sortie");
                jTable1.getColumnModel().getColumn(0).setHeaderValue("ID du patient");
                jTable1.getColumnModel().getColumn(1).setHeaderValue("Nom");
                jTable1.getTableHeader().repaint();
                break;
            default:
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setFont(new java.awt.Font("Modern No. 20", 0, 14)); // NOI18N
        jTextField1.setPreferredSize(new java.awt.Dimension(100, 30));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 0, 250, -1));

        jButton1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(493, 2, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 36, 609, 285));

        jButton2.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jButton2.setText("Exit");
        jButton2.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 320, -1, -1));

        jComboBox1.setFont(new java.awt.Font("Calibri", 2, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Gender", "Blood Type", "Year of Birth" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 0, 180, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\dinur\\Documents\\NetBeansProjects\\HospitalManagementSystem\\src\\main\\java\\Images\\WhiteBack.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 350));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new Home().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String KeyWord = jTextField1.getText();
        KeyWord = KeyWord.toUpperCase();
        String Patient = null;
        String Name = null;
        String PatientID = null;

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        switch (jComboBox1.getSelectedIndex()) {
            case 0: {
                try {

                    Connection con = new DBConnect().Connect();
                    Statement stmt = con.createStatement();
                    String sql = "SELECT * FROM PATIENTS";
                    ResultSet rs = stmt.executeQuery(sql);

                    while (rs.next()) {
                        Patient = rs.getString(2);
                        Patient = Patient.toUpperCase();

                        int Index = Patient.indexOf(KeyWord);

                        if (Index != -1) {
                            PatientID = rs.getString(1);
                            Name = rs.getString(2);

                            Object[] row = {PatientID, Name};

                            model.addRow(row);
                        }
                    }

                } catch (Exception e) {
                    System.out.println(e);
                }
                break;
            }
            case 1: {
                try {

                    Connection con = new DBConnect().Connect();
                    Statement stmt = con.createStatement();
                    String sql = "SELECT * FROM PATIENTS";
                    ResultSet rs = stmt.executeQuery(sql);

                    while (rs.next()) {
                        Patient = rs.getString(3);
                        Patient = Patient.toUpperCase();

                        int Index = Patient.indexOf(KeyWord);

                        if (Index != -1) {
                            PatientID = rs.getString(1);
                            Name = rs.getString(2);

                            Object[] row = {PatientID, Name};

                            model.addRow(row);
                        }
                    }

                } catch (Exception e) {
                    System.out.println(e);
                }
                break;
            }
            case 2: {
                try {

                    Connection con = new DBConnect().Connect();
                    Statement stmt = con.createStatement();
                    String sql = "SELECT * FROM PATIENTS";
                    ResultSet rs = stmt.executeQuery(sql);

                    while (rs.next()) {
                        Patient = rs.getString(5);
                        Patient = Patient.toUpperCase();

                        int Index = Patient.indexOf(KeyWord);

                        if (Index != -1) {
                            PatientID = rs.getString(1);
                            Name = rs.getString(2);

                            Object[] row = {PatientID, Name};

                            model.addRow(row);
                        }
                    }

                } catch (Exception e) {
                    System.out.println(e);
                }
                break;
            }
            case 3: {
                try {

                    Connection con = new DBConnect().Connect();
                    Statement stmt = con.createStatement();
                    String sql = "SELECT * FROM PATIENTS";
                    ResultSet rs = stmt.executeQuery(sql);

                    while (rs.next()) {
                        Patient = rs.getString(4);
                        Patient = Patient.toUpperCase();

                        int Index = Patient.indexOf(KeyWord);

                        if (Index != -1) {
                            PatientID = rs.getString(1);
                            Name = rs.getString(2);

                            Object[] row = {PatientID, Name};

                            model.addRow(row);
                        }
                    }

                } catch (Exception e) {
                    System.out.println(e);
                }
                break;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchPatients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
